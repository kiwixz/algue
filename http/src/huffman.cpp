#include "http/huffman.h"

namespace algue::http {
namespace {

struct HuffmanPair {
    int chr;
    unsigned code;
};

struct HuffmanTree {
    constexpr HuffmanTree(std::initializer_list<HuffmanPair> list)
    {}
};

constexpr HuffmanTree huffman_tree = {{
        {0, 0x1ff8},
        {1, 0x7fffd8},
        {2, 0xfffffe2},
        {3, 0xfffffe3},
        {4, 0xfffffe4},
        {5, 0xfffffe5},
        {6, 0xfffffe6},
        {7, 0xfffffe7},
        {8, 0xfffffe8},
        {9, 0xffffea},
        {10, 0x3ffffffc},
        {11, 0xfffffe9},
        {12, 0xfffffea},
        {13, 0x3ffffffd},
        {14, 0xfffffeb},
        {15, 0xfffffec},
        {16, 0xfffffed},
        {17, 0xfffffee},
        {18, 0xfffffef},
        {19, 0xffffff0},
        {20, 0xffffff1},
        {21, 0xffffff2},
        {22, 0x3ffffffe},
        {23, 0xffffff3},
        {24, 0xffffff4},
        {25, 0xffffff5},
        {26, 0xffffff6},
        {27, 0xffffff7},
        {28, 0xffffff8},
        {29, 0xffffff9},
        {30, 0xffffffa},
        {31, 0xffffffb},
        {32, 0x14},
        {33, 0x3f8},
        {34, 0x3f9},
        {35, 0xffa},
        {36, 0x1ff9},
        {37, 0x15},
        {38, 0xf8},
        {39, 0x7fa},
        {40, 0x3fa},
        {41, 0x3fb},
        {42, 0xf9},
        {43, 0x7fb},
        {44, 0xfa},
        {45, 0x16},
        {46, 0x17},
        {47, 0x18},
        {48, 0x0},
        {49, 0x1},
        {50, 0x2},
        {51, 0x19},
        {52, 0x1a},
        {53, 0x1b},
        {54, 0x1c},
        {55, 0x1d},
        {56, 0x1e},
        {57, 0x1f},
        {58, 0x5c},
        {59, 0xfb},
        {60, 0x7ffc},
        {61, 0x20},
        {62, 0xffb},
        {63, 0x3fc},
        {64, 0x1ffa},
        {65, 0x21},
        {66, 0x5d},
        {67, 0x5e},
        {68, 0x5f},
        {69, 0x60},
        {70, 0x61},
        {71, 0x62},
        {72, 0x63},
        {73, 0x64},
        {74, 0x65},
        {75, 0x66},
        {76, 0x67},
        {77, 0x68},
        {78, 0x69},
        {79, 0x6a},
        {80, 0x6b},
        {81, 0x6c},
        {82, 0x6d},
        {83, 0x6e},
        {84, 0x6f},
        {85, 0x70},
        {86, 0x71},
        {87, 0x72},
        {88, 0xfc},
        {89, 0x73},
        {90, 0xfd},
        {91, 0x1ffb},
        {92, 0x7fff0},
        {93, 0x1ffc},
        {94, 0x3ffc},
        {95, 0x22},
        {96, 0x7ffd},
        {97, 0x3},
        {98, 0x23},
        {99, 0x4},
        {100, 0x24},
        {101, 0x5},
        {102, 0x25},
        {103, 0x26},
        {104, 0x27},
        {105, 0x6},
        {106, 0x74},
        {107, 0x75},
        {108, 0x28},
        {109, 0x29},
        {110, 0x2a},
        {111, 0x7},
        {112, 0x2b},
        {113, 0x76},
        {114, 0x2c},
        {115, 0x8},
        {116, 0x9},
        {117, 0x2d},
        {118, 0x77},
        {119, 0x78},
        {120, 0x79},
        {121, 0x7a},
        {122, 0x7b},
        {123, 0x7ffe},
        {124, 0x7fc},
        {125, 0x3ffd},
        {126, 0x1ffd},
        {127, 0xffffffc},
        {128, 0xfffe6},
        {129, 0x3fffd2},
        {130, 0xfffe7},
        {131, 0xfffe8},
        {132, 0x3fffd3},
        {133, 0x3fffd4},
        {134, 0x3fffd5},
        {135, 0x7fffd9},
        {136, 0x3fffd6},
        {137, 0x7fffda},
        {138, 0x7fffdb},
        {139, 0x7fffdc},
        {140, 0x7fffdd},
        {141, 0x7fffde},
        {142, 0xffffeb},
        {143, 0x7fffdf},
        {144, 0xffffec},
        {145, 0xffffed},
        {146, 0x3fffd7},
        {147, 0x7fffe0},
        {148, 0xffffee},
        {149, 0x7fffe1},
        {150, 0x7fffe2},
        {151, 0x7fffe3},
        {152, 0x7fffe4},
        {153, 0x1fffdc},
        {154, 0x3fffd8},
        {155, 0x7fffe5},
        {156, 0x3fffd9},
        {157, 0x7fffe6},
        {158, 0x7fffe7},
        {159, 0xffffef},
        {160, 0x3fffda},
        {161, 0x1fffdd},
        {162, 0xfffe9},
        {163, 0x3fffdb},
        {164, 0x3fffdc},
        {165, 0x7fffe8},
        {166, 0x7fffe9},
        {167, 0x1fffde},
        {168, 0x7fffea},
        {169, 0x3fffdd},
        {170, 0x3fffde},
        {171, 0xfffff0},
        {172, 0x1fffdf},
        {173, 0x3fffdf},
        {174, 0x7fffeb},
        {175, 0x7fffec},
        {176, 0x1fffe0},
        {177, 0x1fffe1},
        {178, 0x3fffe0},
        {179, 0x1fffe2},
        {180, 0x7fffed},
        {181, 0x3fffe1},
        {182, 0x7fffee},
        {183, 0x7fffef},
        {184, 0xfffea},
        {185, 0x3fffe2},
        {186, 0x3fffe3},
        {187, 0x3fffe4},
        {188, 0x7ffff0},
        {189, 0x3fffe5},
        {190, 0x3fffe6},
        {191, 0x7ffff1},
        {192, 0x3ffffe0},
        {193, 0x3ffffe1},
        {194, 0xfffeb},
        {195, 0x7fff1},
        {196, 0x3fffe7},
        {197, 0x7ffff2},
        {198, 0x3fffe8},
        {199, 0x1ffffec},
        {200, 0x3ffffe2},
        {201, 0x3ffffe3},
        {202, 0x3ffffe4},
        {203, 0x7ffffde},
        {204, 0x7ffffdf},
        {205, 0x3ffffe5},
        {206, 0xfffff1},
        {207, 0x1ffffed},
        {208, 0x7fff2},
        {209, 0x1fffe3},
        {210, 0x3ffffe6},
        {211, 0x7ffffe0},
        {212, 0x7ffffe1},
        {213, 0x3ffffe7},
        {214, 0x7ffffe2},
        {215, 0xfffff2},
        {216, 0x1fffe4},
        {217, 0x1fffe5},
        {218, 0x3ffffe8},
        {219, 0x3ffffe9},
        {220, 0xffffffd},
        {221, 0x7ffffe3},
        {222, 0x7ffffe4},
        {223, 0x7ffffe5},
        {224, 0xfffec},
        {225, 0xfffff3},
        {226, 0xfffed},
        {227, 0x1fffe6},
        {228, 0x3fffe9},
        {229, 0x1fffe7},
        {230, 0x1fffe8},
        {231, 0x7ffff3},
        {232, 0x3fffea},
        {233, 0x3fffeb},
        {234, 0x1ffffee},
        {235, 0x1ffffef},
        {236, 0xfffff4},
        {237, 0xfffff5},
        {238, 0x3ffffea},
        {239, 0x7ffff4},
        {240, 0x3ffffeb},
        {241, 0x7ffffe6},
        {242, 0x3ffffec},
        {243, 0x3ffffed},
        {244, 0x7ffffe7},
        {245, 0x7ffffe8},
        {246, 0x7ffffe9},
        {247, 0x7ffffea},
        {248, 0x7ffffeb},
        {249, 0xffffffe},
        {250, 0x7ffffec},
        {251, 0x7ffffed},
        {252, 0x7ffffee},
        {253, 0x7ffffef},
        {254, 0x7fffff0},
        {255, 0x3ffffee},
        {256, 0x3fffffff},
}};

}  // namespace


void huffman_size(std::string_view src)
{}

void huffman_encode(std::string_view src, kae::Span<std::byte> dest)
{}

std::string huffman_decode(kae::Span<const std::byte> src)
{}

}  // namespace algue::http
